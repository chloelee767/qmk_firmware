#!/usr/bin/env python3

# A script to help format the autogenerated layout from the qmk configurator

def get_first_n_and_remove(l : list, n : int):
    res = l[:n].copy()
    del l[:n]
    return res

def format_layout(layout: str):
    keys = layout.strip().split(", ")
    assert len(keys) == 60

    # remove trailing comma from last key
    keys[-1] = keys[-1].rstrip(",")

    print("LAYOUT(")

    print("/* Number Row */")
    for _ in range(2):
        print(", ".join(get_first_n_and_remove(keys, 6)) + ",")

    print("/* Qwerty Row */")
    for _ in range(2):
        print(", ".join(get_first_n_and_remove(keys, 6)) + ",")

    print("/* Home Row */")
    for _ in range(2):
        print(", ".join(get_first_n_and_remove(keys, 6)) + ",")

    print("/* Zxc Row (Left) */")
    print(", ".join(get_first_n_and_remove(keys, 6)) + ",")

    print("/* Encoder Presses */")
    print(", ".join(get_first_n_and_remove(keys, 2)) + ",")

    print("/* Zxc Row (Right) */")
    print(", ".join(get_first_n_and_remove(keys, 6)) + ",")

    print("/* Bottom Row */")
    print(", ".join(get_first_n_and_remove(keys, 6)) + ",")
    print(", ".join(get_first_n_and_remove(keys, 6)))

    print("),")

    assert(len(keys) == 0)



layouts = [
"""
KC_GRV, KC_HOME, KC_END, KC_PGUP, KC_PGDN, KC_GRV, KC_NO, KC_LBRC, KC_RBRC, KC_BSLS, KC_MINS, KC_EQL, KC_TAB, KC_Q, KC_W, LGUI_T(KC_E), KC_R, KC_T, KC_Y, KC_U, LGUI_T(KC_I), KC_O, KC_P, KC_0, KC_ESC, LSFT_T(KC_A), LGUI_T(KC_S), LALT_T(KC_D), LCTL_T(KC_F), KC_G, KC_H, LCTL_T(KC_J), LALT_T(KC_K), LGUI_T(KC_L), LSFT_T(KC_SCLN), KC_QUOT, KC_CAPS, KC_Z, KC_X, KC_C, KC_V, KC_B, KC_MPLY, KC_NO, KC_N, KC_M, KC_COMM, KC_DOT, KC_SLSH, KC_RSFT, KC_LGUI, KC_LALT, LT(3,KC_DEL), LT(1,KC_BSPC), LT(2,KC_TAB), LT(1,KC_ENT), LT(2,KC_SPC), LT(3,KC_BSPC), KC_RALT, MO(4),
""",
"""
KC_TRNS, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_TRNS, KC_TRNS, KC_NO, KC_NO, KC_TRNS, KC_NO, KC_PPLS, KC_PEQL, KC_NO, KC_GRV, KC_CIRC, KC_AMPR, KC_ASTR, KC_PIPE, KC_BSLS, KC_NO, KC_TRNS, KC_EXLM, KC_PERC, KC_MINS, KC_COLN, KC_TILD, KC_DLR, KC_LPRN, KC_LCBR, KC_RBRC, KC_SLSH, KC_DQUO, KC_TRNS, KC_AT, KC_HASH, KC_UNDS, KC_NO, KC_NO, KC_TRNS, KC_TRNS, KC_BSLS, KC_LBRC, KC_COMM, KC_DOT, KC_QUES, KC_QUOT, KC_LGUI, KC_LALT, KC_LCTL, KC_TRNS, KC_TRNS, KC_TRNS, KC_RPRN, KC_RCBR, KC_TRNS, KC_TRNS,
""",
"""
KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_TRNS, KC_TRNS, KC_NO, KC_NO, KC_BSLS, KC_MINS, KC_1, LGUI_T(KC_2), KC_3, KC_4, KC_HOME, KC_PGUP, KC_UP, KC_PGDN, KC_NO, KC_NO, KC_DLR, LSFT_T(KC_DOT), LGUI_T(KC_4), LALT_T(KC_5), LCTL_T(KC_6), KC_7, KC_END, KC_LEFT, KC_DOWN, KC_RGHT, KC_LGUI, KC_NO, KC_NO, KC_NO, KC_7, KC_8, KC_9, KC_BSLS, KC_TRNS, KC_TRNS, KC_NO, KC_LCTL, KC_LALT, KC_LGUI, KC_LSFT, KC_NO, KC_TRNS, KC_TRNS, KC_LGUI, KC_0, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
""",
"""
KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_F9, KC_F10, KC_F11, KC_F12, KC_F13, KC_NO, KC_NO, KC_LGUI, KC_NO, KC_NO, KC_NO, KC_NO, KC_F5, KC_F6, KC_F7, KC_F8, KC_NO, KC_NO, KC_LCTL, KC_LALT, KC_LGUI, KC_LSFT, KC_NO, KC_NO, KC_F1, KC_F2, KC_F3, KC_F4, KC_NO, KC_TRNS, KC_TRNS, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
""",
"""
KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_MUTE, KC_VOLD, KC_VOLD, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_MRWD, KC_MPLY, KC_MFFD, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_BRID, KC_BRIU, KC_NO, KC_MUTE, KC_TRNS, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS
""",
]

for l in layouts:
    format_layout(l)
    print()
    print()
